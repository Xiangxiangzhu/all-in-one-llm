
worker_processes auto;

events {
    worker_connections 1024;  # 可以根据需要调整
}

http {
    lua_package_path '/usr/local/share/lua/5.1/?.lua;;';
    resolver 127.0.0.11;  # Docker 默认的 DNS 解析器
	
	client_max_body_size 50M;

    server {
        listen 80;
        server_name localhost;
		
		
		# OpenAI endpoints
		location ~ ^/(health|v1/models|docs|openapi.json|images|upload-image) {
			proxy_pass                              http://fastapi:8000;
			proxy_set_header    Host                $host;
			proxy_set_header    X-Real-IP           $remote_addr;
			proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
			proxy_set_header    X-Forwarded-Proto   $scheme;
			proxy_set_header    Authorization       $http_authorization;
		}
		
		location ~ ^/(v1/chat/completions|v1/completions) {
		          set $target "";

		          access_by_lua_block {
		              local cjson = require "cjson"

		              -- 读取请求体
		              ngx.req.read_body()
		              local body = ngx.req.get_body_data()

		              if body then
		                  local data = cjson.decode(body)

		                  -- 检查 "messages" 是否存在并且是一个表
		                  if data.messages and type(data.messages) == "table" then
		                      for _, message in ipairs(data.messages) do
		                          if message.content and type(message.content) == "table" then
		                              for _, content in ipairs(message.content) do
		                                  -- 检查内容中是否有 "image_url"
		                                  if content.type == "image_url" and content.image_url then
		                                      -- 设置 target 为 VLM 端点 (8022)
		                                      ngx.var.target = "http://vlm-qwen2-vl-7b:8022"
		                                      return
		                                  end
		                              end
		                          end
		                      end
		                  end
		                  -- 默认目标是 LLM 端点 (8012)
		                  ngx.var.target = "http://llm-qwen2_5-72b-int4-2gpu:8012"
		              else
		                  -- 处理空请求体的情况
		                  ngx.var.target = "http://llm-qwen2_5-72b-int4-2gpu:8012"
		              end
		          }

		          # 使用 proxy_pass 转发请求
		          proxy_pass $target;
		          proxy_set_header Host $host;
		          proxy_set_header X-Real-IP $remote_addr;
		          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		          proxy_set_header X-Forwarded-Proto $scheme;
		      }

		location ~ ^/(v1/embeddings) {
			proxy_pass                              http://embed-gte-qwen2-7b:8112;
			proxy_set_header    Host                $host;
			proxy_set_header    X-Real-IP           $remote_addr;
			proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
			proxy_set_header    X-Forwarded-Proto   $scheme;
			proxy_set_header    Authorization       $http_authorization;
		}


    }
}



