env LLM_1GPU_REPLICAS;
env LLM_2GPU_REPLICAS;
env LLM_4GPU_REPLICAS;
env ALM_REPLICAS;
env CODE_LLM_REPLICAS;
env ASR_REPLICAS; 

worker_processes auto;

events {
    worker_connections 1024;
}

http {
    lua_package_path '/usr/local/share/lua/5.1/?.lua;;';
    resolver 127.0.0.11;  # default Docker DNS resolver

    client_max_body_size 50M;

    server {
	listen 80;
        server_name localhost;

        # OpenAI endpoints
        location ~ ^/(health|v1/models|docs|openapi.json|files|upload-file) {
            proxy_pass                              http://fastapi:8000;
            proxy_set_header    Host                $host;
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_set_header    Authorization       $http_authorization;
        }

        location ~ ^/(v1/chat/completions|v1/completions) {
            set $target "";

            access_by_lua_block {
                local cjson = require "cjson"
				
				local llm_1gpu_replicas = tonumber(os.getenv("LLM_1GPU_REPLICAS")) or 0
				local llm_2gpu_replicas = tonumber(os.getenv("LLM_2GPU_REPLICAS")) or 0
				local llm_4gpu_replicas = tonumber(os.getenv("LLM_4GPU_REPLICAS")) or 0
				local code_llm_replicas = tonumber(os.getenv("CODE_LLM_REPLICAS")) or 0

				local target_url = "http://default-target:8012"

				if llm_1gpu_replicas > 0 then
					target_url = "http://llm-qwen2_5-7b:8012"
				elseif llm_2gpu_replicas > 0 then
					target_url = "http://llm-qwen2_5-72b-int4-2gpu:8012"
				elseif llm_4gpu_replicas > 0 then
					target_url = "http://llm-qwen2_5-72b-int4:8012"
				elseif code_llm_replicas > 0 then
					target_url = "http://llm-qwen2_5-code-7b:8012"
				end	

				-- read request
                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                if not body then
                    local body_file = ngx.req.get_body_file()
                    if body_file then
                        local file = io.open(body_file, "r")
                        if file then
                            body = file:read("*a")
                            file:close()
                        end
                    end
                end

                if body then
                    local data = cjson.decode(body)
                    -- check if a table is in "messages"
                    if data.messages and type(data.messages) == "table" then
                        for _, message in ipairs(data.messages) do
                            if message.content and type(message.content) == "table" then
                                for _, content in ipairs(message.content) do
                                    -- check if "image_url" in content
                                    if content.type == "image_url" and content.image_url then
                                        -- set target to VLM port (8022)
                                        ngx.var.target = "http://vlm-qwen2-vl-7b:8022"
                                        return
                                    end
                                end
                            end
                        end
                    end
                    ngx.var.target = target_url
                else
                    -- handle empty request
                    ngx.var.target = target_url
                end
            }

            proxy_pass $target;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~ ^/(inference) {
            proxy_pass                              http://whisper-large-v3:8132;
            proxy_set_header    Host                $host;
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_set_header    Authorization       $http_authorization;
        }

        location ~ ^/(v1/embeddings) {
            proxy_pass                              http://embed-gte-qwen2-7b:8112;
            proxy_set_header    Host                $host;
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_set_header    Authorization       $http_authorization;
        }

    }
}


